--- captive-1.1.5/src/libcaptive/sandbox/sandbox.h.orig	1970-01-01 01:00:00.000000000 +0100
+++ captive-1.1.5/src/libcaptive/sandbox/sandbox.h	2003-12-13 23:02:54.000000000 +0100
@@ -0,0 +1,1632 @@
+/*
+ * This file was generated by orbit-idl-2 - DO NOT EDIT!
+ */
+
+#ifndef sandbox_H
+#define sandbox_H 1
+#include <glib.h>
+#define ORBIT_IDL_SERIAL 20
+#include <orbit/orbit-types.h>
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif				/* __cplusplus */
+
+/** typedefs **/
+#if !defined(ORBIT_DECL_CORBA_sequence_CORBA_octet)
+#define ORBIT_DECL_CORBA_sequence_CORBA_octet 1
+#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_0 's'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_1 'a'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_2 'n'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_3 'd'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_4 'b'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_5 'o'
+#define ORBIT_IMPL_CORBA_sequence_CORBA_octet_6 'x'
+#if !defined(_CORBA_sequence_CORBA_octet_defined)
+#define _CORBA_sequence_CORBA_octet_defined 1
+   typedef struct
+   {
+      CORBA_unsigned_long _maximum,
+       _length;
+      CORBA_octet *_buffer;
+      CORBA_boolean _release;
+   } CORBA_sequence_CORBA_octet;
+#endif
+#if !defined(TC_IMPL_TC_CORBA_sequence_CORBA_octet_0)
+#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_0 's'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_1 'a'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_2 'n'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_3 'd'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_4 'b'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_5 'o'
+#define TC_IMPL_TC_CORBA_sequence_CORBA_octet_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_CORBA_sequence_CORBA_octet_struct;
+#define TC_CORBA_sequence_CORBA_octet ((CORBA_TypeCode)&TC_CORBA_sequence_CORBA_octet_struct)
+#endif
+#define CORBA_sequence_CORBA_octet__alloc() ((CORBA_sequence_CORBA_octet *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
+#define CORBA_sequence_CORBA_octet__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
+#define CORBA_sequence_CORBA_octet_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
+#define CORBA_sequence_CORBA_octet_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
+#endif
+#if !defined(_Captive_Bytes_defined)
+#define _Captive_Bytes_defined 1
+   typedef CORBA_sequence_CORBA_octet Captive_Bytes;
+#define Captive_Bytes_marshal(x,y,z) CORBA_sequence_CORBA_octet_marshal((x),(y),(z))
+#define Captive_Bytes_demarshal(x,y,z,i) CORBA_sequence_CORBA_octet_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_Bytes_0)
+#define TC_IMPL_TC_Captive_Bytes_0 's'
+#define TC_IMPL_TC_Captive_Bytes_1 'a'
+#define TC_IMPL_TC_Captive_Bytes_2 'n'
+#define TC_IMPL_TC_Captive_Bytes_3 'd'
+#define TC_IMPL_TC_Captive_Bytes_4 'b'
+#define TC_IMPL_TC_Captive_Bytes_5 'o'
+#define TC_IMPL_TC_Captive_Bytes_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_Bytes_struct;
+#define TC_Captive_Bytes ((CORBA_TypeCode)&TC_Captive_Bytes_struct)
+#endif
+#define Captive_Bytes__alloc() ((Captive_Bytes *)ORBit_small_alloc (TC_CORBA_sequence_CORBA_octet))
+#define Captive_Bytes__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_CORBA_octet,(m),(d))
+#define Captive_Bytes_allocbuf(l) ((CORBA_octet*)ORBit_small_allocbuf (TC_CORBA_sequence_CORBA_octet, (l)))
+#endif
+#if !defined(_Captive_GnomeVFSResult_defined)
+#define _Captive_GnomeVFSResult_defined 1
+   typedef CORBA_unsigned_long Captive_GnomeVFSResult;
+#define Captive_GnomeVFSResult_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GnomeVFSResult_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSResult_0)
+#define TC_IMPL_TC_Captive_GnomeVFSResult_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSResult_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSResult_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSResult_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSResult_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSResult_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSResult_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GnomeVFSResult_struct;
+#define TC_Captive_GnomeVFSResult ((CORBA_TypeCode)&TC_Captive_GnomeVFSResult_struct)
+#endif
+#define Captive_GnomeVFSResult__alloc() ((Captive_GnomeVFSResult *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GnomeVFSResult__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#undef ex_Captive_GnomeVFSResultException
+#define ex_Captive_GnomeVFSResultException "IDL:Captive/GnomeVFSResultException:1.0"
+#if !defined(_Captive_GnomeVFSResultException_defined)
+#define _Captive_GnomeVFSResultException_defined 1
+   typedef struct Captive_GnomeVFSResultException_type
+      Captive_GnomeVFSResultException;
+   struct Captive_GnomeVFSResultException_type
+   {
+      Captive_GnomeVFSResult gnome_vfs_result;
+   };
+
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSResultException_0)
+#define TC_IMPL_TC_Captive_GnomeVFSResultException_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSResultException_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSResultException_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSResultException_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSResultException_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSResultException_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSResultException_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct
+      TC_Captive_GnomeVFSResultException_struct;
+#define TC_Captive_GnomeVFSResultException ((CORBA_TypeCode)&TC_Captive_GnomeVFSResultException_struct)
+#endif
+#define Captive_GnomeVFSResultException__alloc() ((Captive_GnomeVFSResultException *)ORBit_small_alloc (TC_Captive_GnomeVFSResultException))
+#define Captive_GnomeVFSResultException__freekids(m,d) ORBit_small_freekids (TC_Captive_GnomeVFSResultException,(m),(d))
+#endif
+#if !defined(_Captive_GIOStatus_defined)
+#define _Captive_GIOStatus_defined 1
+   typedef CORBA_unsigned_long Captive_GIOStatus;
+#define Captive_GIOStatus_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GIOStatus_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GIOStatus_0)
+#define TC_IMPL_TC_Captive_GIOStatus_0 's'
+#define TC_IMPL_TC_Captive_GIOStatus_1 'a'
+#define TC_IMPL_TC_Captive_GIOStatus_2 'n'
+#define TC_IMPL_TC_Captive_GIOStatus_3 'd'
+#define TC_IMPL_TC_Captive_GIOStatus_4 'b'
+#define TC_IMPL_TC_Captive_GIOStatus_5 'o'
+#define TC_IMPL_TC_Captive_GIOStatus_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GIOStatus_struct;
+#define TC_Captive_GIOStatus ((CORBA_TypeCode)&TC_Captive_GIOStatus_struct)
+#endif
+#define Captive_GIOStatus__alloc() ((Captive_GIOStatus *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GIOStatus__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#undef ex_Captive_GIOStatusException
+#define ex_Captive_GIOStatusException "IDL:Captive/GIOStatusException:1.0"
+#if !defined(_Captive_GIOStatusException_defined)
+#define _Captive_GIOStatusException_defined 1
+   typedef struct Captive_GIOStatusException_type Captive_GIOStatusException;
+   struct Captive_GIOStatusException_type
+   {
+      Captive_GIOStatus g_io_status;
+   };
+
+#if !defined(TC_IMPL_TC_Captive_GIOStatusException_0)
+#define TC_IMPL_TC_Captive_GIOStatusException_0 's'
+#define TC_IMPL_TC_Captive_GIOStatusException_1 'a'
+#define TC_IMPL_TC_Captive_GIOStatusException_2 'n'
+#define TC_IMPL_TC_Captive_GIOStatusException_3 'd'
+#define TC_IMPL_TC_Captive_GIOStatusException_4 'b'
+#define TC_IMPL_TC_Captive_GIOStatusException_5 'o'
+#define TC_IMPL_TC_Captive_GIOStatusException_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GIOStatusException_struct;
+#define TC_Captive_GIOStatusException ((CORBA_TypeCode)&TC_Captive_GIOStatusException_struct)
+#endif
+#define Captive_GIOStatusException__alloc() ((Captive_GIOStatusException *)ORBit_small_alloc (TC_Captive_GIOStatusException))
+#define Captive_GIOStatusException__freekids(m,d) ORBit_small_freekids (TC_Captive_GIOStatusException,(m),(d))
+#endif
+#if !defined(_Captive_GLogLevelFlags_defined)
+#define _Captive_GLogLevelFlags_defined 1
+   typedef CORBA_unsigned_long Captive_GLogLevelFlags;
+#define Captive_GLogLevelFlags_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GLogLevelFlags_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GLogLevelFlags_0)
+#define TC_IMPL_TC_Captive_GLogLevelFlags_0 's'
+#define TC_IMPL_TC_Captive_GLogLevelFlags_1 'a'
+#define TC_IMPL_TC_Captive_GLogLevelFlags_2 'n'
+#define TC_IMPL_TC_Captive_GLogLevelFlags_3 'd'
+#define TC_IMPL_TC_Captive_GLogLevelFlags_4 'b'
+#define TC_IMPL_TC_Captive_GLogLevelFlags_5 'o'
+#define TC_IMPL_TC_Captive_GLogLevelFlags_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GLogLevelFlags_struct;
+#define TC_Captive_GLogLevelFlags ((CORBA_TypeCode)&TC_Captive_GLogLevelFlags_struct)
+#endif
+#define Captive_GLogLevelFlags__alloc() ((Captive_GLogLevelFlags *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GLogLevelFlags__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(_Captive_GLogMessage_defined)
+#define _Captive_GLogMessage_defined 1
+   typedef struct Captive_GLogMessage_type Captive_GLogMessage;
+   struct Captive_GLogMessage_type
+   {
+      Captive_GLogLevelFlags log_level;
+      CORBA_string message;
+   };
+
+#if !defined(TC_IMPL_TC_Captive_GLogMessage_0)
+#define TC_IMPL_TC_Captive_GLogMessage_0 's'
+#define TC_IMPL_TC_Captive_GLogMessage_1 'a'
+#define TC_IMPL_TC_Captive_GLogMessage_2 'n'
+#define TC_IMPL_TC_Captive_GLogMessage_3 'd'
+#define TC_IMPL_TC_Captive_GLogMessage_4 'b'
+#define TC_IMPL_TC_Captive_GLogMessage_5 'o'
+#define TC_IMPL_TC_Captive_GLogMessage_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GLogMessage_struct;
+#define TC_Captive_GLogMessage ((CORBA_TypeCode)&TC_Captive_GLogMessage_struct)
+#endif
+#define Captive_GLogMessage__alloc() ((Captive_GLogMessage *)ORBit_small_alloc (TC_Captive_GLogMessage))
+#define Captive_GLogMessage__freekids(m,d) ORBit_small_freekids (TC_Captive_GLogMessage,(m),(d))
+#endif
+#undef ex_Captive_GLogMessageFatal
+#define ex_Captive_GLogMessageFatal "IDL:Captive/GLogMessageFatal:1.0"
+#if !defined(_Captive_GLogMessageFatal_defined)
+#define _Captive_GLogMessageFatal_defined 1
+   typedef struct Captive_GLogMessageFatal_type Captive_GLogMessageFatal;
+   struct Captive_GLogMessageFatal_type
+   {
+      Captive_GLogMessage g_log_message;
+   };
+
+#if !defined(TC_IMPL_TC_Captive_GLogMessageFatal_0)
+#define TC_IMPL_TC_Captive_GLogMessageFatal_0 's'
+#define TC_IMPL_TC_Captive_GLogMessageFatal_1 'a'
+#define TC_IMPL_TC_Captive_GLogMessageFatal_2 'n'
+#define TC_IMPL_TC_Captive_GLogMessageFatal_3 'd'
+#define TC_IMPL_TC_Captive_GLogMessageFatal_4 'b'
+#define TC_IMPL_TC_Captive_GLogMessageFatal_5 'o'
+#define TC_IMPL_TC_Captive_GLogMessageFatal_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GLogMessageFatal_struct;
+#define TC_Captive_GLogMessageFatal ((CORBA_TypeCode)&TC_Captive_GLogMessageFatal_struct)
+#endif
+#define Captive_GLogMessageFatal__alloc() ((Captive_GLogMessageFatal *)ORBit_small_alloc (TC_Captive_GLogMessageFatal))
+#define Captive_GLogMessageFatal__freekids(m,d) ORBit_small_freekids (TC_Captive_GLogMessageFatal,(m),(d))
+#endif
+#if !defined(ORBIT_DECL_Captive_GLogFunc) && !defined(_Captive_GLogFunc_defined)
+#define ORBIT_DECL_Captive_GLogFunc 1
+#define _Captive_GLogFunc_defined 1
+#define Captive_GLogFunc__freekids CORBA_Object__freekids
+   typedef CORBA_Object Captive_GLogFunc;
+   extern CORBA_unsigned_long Captive_GLogFunc__classid;
+#if !defined(TC_IMPL_TC_Captive_GLogFunc_0)
+#define TC_IMPL_TC_Captive_GLogFunc_0 's'
+#define TC_IMPL_TC_Captive_GLogFunc_1 'a'
+#define TC_IMPL_TC_Captive_GLogFunc_2 'n'
+#define TC_IMPL_TC_Captive_GLogFunc_3 'd'
+#define TC_IMPL_TC_Captive_GLogFunc_4 'b'
+#define TC_IMPL_TC_Captive_GLogFunc_5 'o'
+#define TC_IMPL_TC_Captive_GLogFunc_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GLogFunc_struct;
+#define TC_Captive_GLogFunc ((CORBA_TypeCode)&TC_Captive_GLogFunc_struct)
+#endif
+#endif
+#if !defined(_Captive_GnomeVFSFileType_defined)
+#define _Captive_GnomeVFSFileType_defined 1
+   typedef CORBA_unsigned_long Captive_GnomeVFSFileType;
+#define Captive_GnomeVFSFileType_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GnomeVFSFileType_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSFileType_0)
+#define TC_IMPL_TC_Captive_GnomeVFSFileType_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSFileType_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSFileType_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSFileType_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSFileType_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSFileType_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSFileType_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GnomeVFSFileType_struct;
+#define TC_Captive_GnomeVFSFileType ((CORBA_TypeCode)&TC_Captive_GnomeVFSFileType_struct)
+#endif
+#define Captive_GnomeVFSFileType__alloc() ((Captive_GnomeVFSFileType *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GnomeVFSFileType__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(_Captive_GnomeVFSFilePermissions_defined)
+#define _Captive_GnomeVFSFilePermissions_defined 1
+   typedef CORBA_unsigned_short Captive_GnomeVFSFilePermissions;
+#define Captive_GnomeVFSFilePermissions_marshal(x,y,z) CORBA_unsigned_short_marshal((x),(y),(z))
+#define Captive_GnomeVFSFilePermissions_demarshal(x,y,z,i) CORBA_unsigned_short_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSFilePermissions_0)
+#define TC_IMPL_TC_Captive_GnomeVFSFilePermissions_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSFilePermissions_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSFilePermissions_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSFilePermissions_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSFilePermissions_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSFilePermissions_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSFilePermissions_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct
+      TC_Captive_GnomeVFSFilePermissions_struct;
+#define TC_Captive_GnomeVFSFilePermissions ((CORBA_TypeCode)&TC_Captive_GnomeVFSFilePermissions_struct)
+#endif
+#define Captive_GnomeVFSFilePermissions__alloc() ((Captive_GnomeVFSFilePermissions *)ORBit_small_alloc (TC_CORBA_unsigned_short))
+#define Captive_GnomeVFSFilePermissions__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_short,(m),(d))
+#endif
+#if !defined(_Captive_time_t_defined)
+#define _Captive_time_t_defined 1
+   typedef CORBA_unsigned_long_long Captive_time_t;
+#define Captive_time_t_marshal(x,y,z) CORBA_unsigned_long_long_marshal((x),(y),(z))
+#define Captive_time_t_demarshal(x,y,z,i) CORBA_unsigned_long_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_time_t_0)
+#define TC_IMPL_TC_Captive_time_t_0 's'
+#define TC_IMPL_TC_Captive_time_t_1 'a'
+#define TC_IMPL_TC_Captive_time_t_2 'n'
+#define TC_IMPL_TC_Captive_time_t_3 'd'
+#define TC_IMPL_TC_Captive_time_t_4 'b'
+#define TC_IMPL_TC_Captive_time_t_5 'o'
+#define TC_IMPL_TC_Captive_time_t_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_time_t_struct;
+#define TC_Captive_time_t ((CORBA_TypeCode)&TC_Captive_time_t_struct)
+#endif
+#define Captive_time_t__alloc() ((Captive_time_t *)ORBit_small_alloc (TC_CORBA_unsigned_long_long))
+#define Captive_time_t__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long_long,(m),(d))
+#endif
+#if !defined(_Captive_GnomeVFSFileSize_defined)
+#define _Captive_GnomeVFSFileSize_defined 1
+   typedef CORBA_unsigned_long_long Captive_GnomeVFSFileSize;
+#define Captive_GnomeVFSFileSize_marshal(x,y,z) CORBA_unsigned_long_long_marshal((x),(y),(z))
+#define Captive_GnomeVFSFileSize_demarshal(x,y,z,i) CORBA_unsigned_long_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSFileSize_0)
+#define TC_IMPL_TC_Captive_GnomeVFSFileSize_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSFileSize_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSFileSize_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSFileSize_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSFileSize_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSFileSize_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSFileSize_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GnomeVFSFileSize_struct;
+#define TC_Captive_GnomeVFSFileSize ((CORBA_TypeCode)&TC_Captive_GnomeVFSFileSize_struct)
+#endif
+#define Captive_GnomeVFSFileSize__alloc() ((Captive_GnomeVFSFileSize *)ORBit_small_alloc (TC_CORBA_unsigned_long_long))
+#define Captive_GnomeVFSFileSize__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long_long,(m),(d))
+#endif
+#if !defined(_Captive_GnomeVFSFileFlags_defined)
+#define _Captive_GnomeVFSFileFlags_defined 1
+   typedef CORBA_unsigned_long_long Captive_GnomeVFSFileFlags;
+#define Captive_GnomeVFSFileFlags_marshal(x,y,z) CORBA_unsigned_long_long_marshal((x),(y),(z))
+#define Captive_GnomeVFSFileFlags_demarshal(x,y,z,i) CORBA_unsigned_long_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSFileFlags_0)
+#define TC_IMPL_TC_Captive_GnomeVFSFileFlags_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSFileFlags_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSFileFlags_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSFileFlags_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSFileFlags_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSFileFlags_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSFileFlags_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GnomeVFSFileFlags_struct;
+#define TC_Captive_GnomeVFSFileFlags ((CORBA_TypeCode)&TC_Captive_GnomeVFSFileFlags_struct)
+#endif
+#define Captive_GnomeVFSFileFlags__alloc() ((Captive_GnomeVFSFileFlags *)ORBit_small_alloc (TC_CORBA_unsigned_long_long))
+#define Captive_GnomeVFSFileFlags__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long_long,(m),(d))
+#endif
+#if !defined(_Captive_GnomeVFSFileOffset_defined)
+#define _Captive_GnomeVFSFileOffset_defined 1
+   typedef CORBA_long_long Captive_GnomeVFSFileOffset;
+#define Captive_GnomeVFSFileOffset_marshal(x,y,z) CORBA_long_long_marshal((x),(y),(z))
+#define Captive_GnomeVFSFileOffset_demarshal(x,y,z,i) CORBA_long_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSFileOffset_0)
+#define TC_IMPL_TC_Captive_GnomeVFSFileOffset_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSFileOffset_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSFileOffset_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSFileOffset_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSFileOffset_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSFileOffset_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSFileOffset_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GnomeVFSFileOffset_struct;
+#define TC_Captive_GnomeVFSFileOffset ((CORBA_TypeCode)&TC_Captive_GnomeVFSFileOffset_struct)
+#endif
+#define Captive_GnomeVFSFileOffset__alloc() ((Captive_GnomeVFSFileOffset *)ORBit_small_alloc (TC_CORBA_long_long))
+#define Captive_GnomeVFSFileOffset__freekids(m,d) ORBit_small_freekids (TC_CORBA_long_long,(m),(d))
+#endif
+#if !defined(_Captive_GnomeVFSSeekPosition_defined)
+#define _Captive_GnomeVFSSeekPosition_defined 1
+   typedef CORBA_unsigned_long Captive_GnomeVFSSeekPosition;
+#define Captive_GnomeVFSSeekPosition_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GnomeVFSSeekPosition_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSSeekPosition_0)
+#define TC_IMPL_TC_Captive_GnomeVFSSeekPosition_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSSeekPosition_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSSeekPosition_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSSeekPosition_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSSeekPosition_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSSeekPosition_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSSeekPosition_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GnomeVFSSeekPosition_struct;
+#define TC_Captive_GnomeVFSSeekPosition ((CORBA_TypeCode)&TC_Captive_GnomeVFSSeekPosition_struct)
+#endif
+#define Captive_GnomeVFSSeekPosition__alloc() ((Captive_GnomeVFSSeekPosition *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GnomeVFSSeekPosition__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(_Captive_GnomeVFSSetFileInfoMask_defined)
+#define _Captive_GnomeVFSSetFileInfoMask_defined 1
+   typedef CORBA_unsigned_long Captive_GnomeVFSSetFileInfoMask;
+#define Captive_GnomeVFSSetFileInfoMask_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GnomeVFSSetFileInfoMask_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSSetFileInfoMask_0)
+#define TC_IMPL_TC_Captive_GnomeVFSSetFileInfoMask_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSSetFileInfoMask_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSSetFileInfoMask_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSSetFileInfoMask_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSSetFileInfoMask_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSSetFileInfoMask_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSSetFileInfoMask_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct
+      TC_Captive_GnomeVFSSetFileInfoMask_struct;
+#define TC_Captive_GnomeVFSSetFileInfoMask ((CORBA_TypeCode)&TC_Captive_GnomeVFSSetFileInfoMask_struct)
+#endif
+#define Captive_GnomeVFSSetFileInfoMask__alloc() ((Captive_GnomeVFSSetFileInfoMask *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GnomeVFSSetFileInfoMask__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(_Captive_GnomeVFSOpenMode_defined)
+#define _Captive_GnomeVFSOpenMode_defined 1
+   typedef CORBA_unsigned_long_long Captive_GnomeVFSOpenMode;
+#define Captive_GnomeVFSOpenMode_marshal(x,y,z) CORBA_unsigned_long_long_marshal((x),(y),(z))
+#define Captive_GnomeVFSOpenMode_demarshal(x,y,z,i) CORBA_unsigned_long_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSOpenMode_0)
+#define TC_IMPL_TC_Captive_GnomeVFSOpenMode_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSOpenMode_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSOpenMode_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSOpenMode_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSOpenMode_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSOpenMode_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSOpenMode_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GnomeVFSOpenMode_struct;
+#define TC_Captive_GnomeVFSOpenMode ((CORBA_TypeCode)&TC_Captive_GnomeVFSOpenMode_struct)
+#endif
+#define Captive_GnomeVFSOpenMode__alloc() ((Captive_GnomeVFSOpenMode *)ORBit_small_alloc (TC_CORBA_unsigned_long_long))
+#define Captive_GnomeVFSOpenMode__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long_long,(m),(d))
+#endif
+#if !defined(_Captive_GnomeVFSFileInfo_defined)
+#define _Captive_GnomeVFSFileInfo_defined 1
+   typedef struct Captive_GnomeVFSFileInfo_type Captive_GnomeVFSFileInfo;
+   struct Captive_GnomeVFSFileInfo_type
+   {
+      CORBA_string name;
+      Captive_GnomeVFSFileType type;
+      CORBA_boolean type_valid;
+      Captive_GnomeVFSFilePermissions permissions;
+      CORBA_boolean permissions_valid;
+      Captive_GnomeVFSFileSize size;
+      CORBA_boolean size_valid;
+      Captive_GnomeVFSFileSize block_count;
+      CORBA_boolean block_count_valid;
+      Captive_time_t atime;
+      Captive_time_t mtime;
+      Captive_time_t ctime;
+      Captive_GnomeVFSFileFlags flags;
+      CORBA_boolean flags_valid;
+   };
+
+#if !defined(TC_IMPL_TC_Captive_GnomeVFSFileInfo_0)
+#define TC_IMPL_TC_Captive_GnomeVFSFileInfo_0 's'
+#define TC_IMPL_TC_Captive_GnomeVFSFileInfo_1 'a'
+#define TC_IMPL_TC_Captive_GnomeVFSFileInfo_2 'n'
+#define TC_IMPL_TC_Captive_GnomeVFSFileInfo_3 'd'
+#define TC_IMPL_TC_Captive_GnomeVFSFileInfo_4 'b'
+#define TC_IMPL_TC_Captive_GnomeVFSFileInfo_5 'o'
+#define TC_IMPL_TC_Captive_GnomeVFSFileInfo_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GnomeVFSFileInfo_struct;
+#define TC_Captive_GnomeVFSFileInfo ((CORBA_TypeCode)&TC_Captive_GnomeVFSFileInfo_struct)
+#endif
+#define Captive_GnomeVFSFileInfo__alloc() ((Captive_GnomeVFSFileInfo *)ORBit_small_alloc (TC_Captive_GnomeVFSFileInfo))
+#define Captive_GnomeVFSFileInfo__freekids(m,d) ORBit_small_freekids (TC_Captive_GnomeVFSFileInfo,(m),(d))
+#endif
+#if !defined(_Captive_GInt64_defined)
+#define _Captive_GInt64_defined 1
+   typedef CORBA_long_long Captive_GInt64;
+#define Captive_GInt64_marshal(x,y,z) CORBA_long_long_marshal((x),(y),(z))
+#define Captive_GInt64_demarshal(x,y,z,i) CORBA_long_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GInt64_0)
+#define TC_IMPL_TC_Captive_GInt64_0 's'
+#define TC_IMPL_TC_Captive_GInt64_1 'a'
+#define TC_IMPL_TC_Captive_GInt64_2 'n'
+#define TC_IMPL_TC_Captive_GInt64_3 'd'
+#define TC_IMPL_TC_Captive_GInt64_4 'b'
+#define TC_IMPL_TC_Captive_GInt64_5 'o'
+#define TC_IMPL_TC_Captive_GInt64_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GInt64_struct;
+#define TC_Captive_GInt64 ((CORBA_TypeCode)&TC_Captive_GInt64_struct)
+#endif
+#define Captive_GInt64__alloc() ((Captive_GInt64 *)ORBit_small_alloc (TC_CORBA_long_long))
+#define Captive_GInt64__freekids(m,d) ORBit_small_freekids (TC_CORBA_long_long,(m),(d))
+#endif
+#if !defined(_Captive_GUInt64_defined)
+#define _Captive_GUInt64_defined 1
+   typedef CORBA_unsigned_long_long Captive_GUInt64;
+#define Captive_GUInt64_marshal(x,y,z) CORBA_unsigned_long_long_marshal((x),(y),(z))
+#define Captive_GUInt64_demarshal(x,y,z,i) CORBA_unsigned_long_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GUInt64_0)
+#define TC_IMPL_TC_Captive_GUInt64_0 's'
+#define TC_IMPL_TC_Captive_GUInt64_1 'a'
+#define TC_IMPL_TC_Captive_GUInt64_2 'n'
+#define TC_IMPL_TC_Captive_GUInt64_3 'd'
+#define TC_IMPL_TC_Captive_GUInt64_4 'b'
+#define TC_IMPL_TC_Captive_GUInt64_5 'o'
+#define TC_IMPL_TC_Captive_GUInt64_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GUInt64_struct;
+#define TC_Captive_GUInt64 ((CORBA_TypeCode)&TC_Captive_GUInt64_struct)
+#endif
+#define Captive_GUInt64__alloc() ((Captive_GUInt64 *)ORBit_small_alloc (TC_CORBA_unsigned_long_long))
+#define Captive_GUInt64__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long_long,(m),(d))
+#endif
+#if !defined(_Captive_GSeekType_defined)
+#define _Captive_GSeekType_defined 1
+   typedef CORBA_unsigned_long Captive_GSeekType;
+#define Captive_GSeekType_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GSeekType_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GSeekType_0)
+#define TC_IMPL_TC_Captive_GSeekType_0 's'
+#define TC_IMPL_TC_Captive_GSeekType_1 'a'
+#define TC_IMPL_TC_Captive_GSeekType_2 'n'
+#define TC_IMPL_TC_Captive_GSeekType_3 'd'
+#define TC_IMPL_TC_Captive_GSeekType_4 'b'
+#define TC_IMPL_TC_Captive_GSeekType_5 'o'
+#define TC_IMPL_TC_Captive_GSeekType_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GSeekType_struct;
+#define TC_Captive_GSeekType ((CORBA_TypeCode)&TC_Captive_GSeekType_struct)
+#endif
+#define Captive_GSeekType__alloc() ((Captive_GSeekType *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GSeekType__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(_Captive_GSize_defined)
+#define _Captive_GSize_defined 1
+   typedef CORBA_unsigned_long Captive_GSize;
+#define Captive_GSize_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GSize_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GSize_0)
+#define TC_IMPL_TC_Captive_GSize_0 's'
+#define TC_IMPL_TC_Captive_GSize_1 'a'
+#define TC_IMPL_TC_Captive_GSize_2 'n'
+#define TC_IMPL_TC_Captive_GSize_3 'd'
+#define TC_IMPL_TC_Captive_GSize_4 'b'
+#define TC_IMPL_TC_Captive_GSize_5 'o'
+#define TC_IMPL_TC_Captive_GSize_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GSize_struct;
+#define TC_Captive_GSize ((CORBA_TypeCode)&TC_Captive_GSize_struct)
+#endif
+#define Captive_GSize__alloc() ((Captive_GSize *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GSize__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(ORBIT_DECL_Captive_CaptiveIOChannel) && !defined(_Captive_CaptiveIOChannel_defined)
+#define ORBIT_DECL_Captive_CaptiveIOChannel 1
+#define _Captive_CaptiveIOChannel_defined 1
+#define Captive_CaptiveIOChannel__freekids CORBA_Object__freekids
+   typedef CORBA_Object Captive_CaptiveIOChannel;
+   extern CORBA_unsigned_long Captive_CaptiveIOChannel__classid;
+#if !defined(TC_IMPL_TC_Captive_CaptiveIOChannel_0)
+#define TC_IMPL_TC_Captive_CaptiveIOChannel_0 's'
+#define TC_IMPL_TC_Captive_CaptiveIOChannel_1 'a'
+#define TC_IMPL_TC_Captive_CaptiveIOChannel_2 'n'
+#define TC_IMPL_TC_Captive_CaptiveIOChannel_3 'd'
+#define TC_IMPL_TC_Captive_CaptiveIOChannel_4 'b'
+#define TC_IMPL_TC_Captive_CaptiveIOChannel_5 'o'
+#define TC_IMPL_TC_Captive_CaptiveIOChannel_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_CaptiveIOChannel_struct;
+#define TC_Captive_CaptiveIOChannel ((CORBA_TypeCode)&TC_Captive_CaptiveIOChannel_struct)
+#endif
+#endif
+#if !defined(_Captive_CaptiveOptionRwmode_defined)
+#define _Captive_CaptiveOptionRwmode_defined 1
+   typedef CORBA_unsigned_long Captive_CaptiveOptionRwmode;
+#define Captive_CaptiveOptionRwmode_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_CaptiveOptionRwmode_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_CaptiveOptionRwmode_0)
+#define TC_IMPL_TC_Captive_CaptiveOptionRwmode_0 's'
+#define TC_IMPL_TC_Captive_CaptiveOptionRwmode_1 'a'
+#define TC_IMPL_TC_Captive_CaptiveOptionRwmode_2 'n'
+#define TC_IMPL_TC_Captive_CaptiveOptionRwmode_3 'd'
+#define TC_IMPL_TC_Captive_CaptiveOptionRwmode_4 'b'
+#define TC_IMPL_TC_Captive_CaptiveOptionRwmode_5 'o'
+#define TC_IMPL_TC_Captive_CaptiveOptionRwmode_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_CaptiveOptionRwmode_struct;
+#define TC_Captive_CaptiveOptionRwmode ((CORBA_TypeCode)&TC_Captive_CaptiveOptionRwmode_struct)
+#endif
+#define Captive_CaptiveOptionRwmode__alloc() ((Captive_CaptiveOptionRwmode *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_CaptiveOptionRwmode__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(_Captive_CaptiveOptionMedia_defined)
+#define _Captive_CaptiveOptionMedia_defined 1
+   typedef CORBA_unsigned_long Captive_CaptiveOptionMedia;
+#define Captive_CaptiveOptionMedia_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_CaptiveOptionMedia_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_CaptiveOptionMedia_0)
+#define TC_IMPL_TC_Captive_CaptiveOptionMedia_0 's'
+#define TC_IMPL_TC_Captive_CaptiveOptionMedia_1 'a'
+#define TC_IMPL_TC_Captive_CaptiveOptionMedia_2 'n'
+#define TC_IMPL_TC_Captive_CaptiveOptionMedia_3 'd'
+#define TC_IMPL_TC_Captive_CaptiveOptionMedia_4 'b'
+#define TC_IMPL_TC_Captive_CaptiveOptionMedia_5 'o'
+#define TC_IMPL_TC_Captive_CaptiveOptionMedia_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_CaptiveOptionMedia_struct;
+#define TC_Captive_CaptiveOptionMedia ((CORBA_TypeCode)&TC_Captive_CaptiveOptionMedia_struct)
+#endif
+#define Captive_CaptiveOptionMedia__alloc() ((Captive_CaptiveOptionMedia *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_CaptiveOptionMedia__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(_Captive_CaptiveOptionsModule_defined)
+#define _Captive_CaptiveOptionsModule_defined 1
+   typedef struct Captive_CaptiveOptionsModule_type
+      Captive_CaptiveOptionsModule;
+   struct Captive_CaptiveOptionsModule_type
+   {
+      CORBA_string pathname_utf8;
+      Captive_Bytes data;
+   };
+
+#if !defined(TC_IMPL_TC_Captive_CaptiveOptionsModule_0)
+#define TC_IMPL_TC_Captive_CaptiveOptionsModule_0 's'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModule_1 'a'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModule_2 'n'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModule_3 'd'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModule_4 'b'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModule_5 'o'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModule_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_CaptiveOptionsModule_struct;
+#define TC_Captive_CaptiveOptionsModule ((CORBA_TypeCode)&TC_Captive_CaptiveOptionsModule_struct)
+#endif
+#define Captive_CaptiveOptionsModule__alloc() ((Captive_CaptiveOptionsModule *)ORBit_small_alloc (TC_Captive_CaptiveOptionsModule))
+#define Captive_CaptiveOptionsModule__freekids(m,d) ORBit_small_freekids (TC_Captive_CaptiveOptionsModule,(m),(d))
+#endif
+#if !defined(ORBIT_DECL_CORBA_sequence_Captive_CaptiveOptionsModule)
+#define ORBIT_DECL_CORBA_sequence_Captive_CaptiveOptionsModule 1
+#define ORBIT_IMPL_CORBA_sequence_Captive_CaptiveOptionsModule_0 's'
+#define ORBIT_IMPL_CORBA_sequence_Captive_CaptiveOptionsModule_1 'a'
+#define ORBIT_IMPL_CORBA_sequence_Captive_CaptiveOptionsModule_2 'n'
+#define ORBIT_IMPL_CORBA_sequence_Captive_CaptiveOptionsModule_3 'd'
+#define ORBIT_IMPL_CORBA_sequence_Captive_CaptiveOptionsModule_4 'b'
+#define ORBIT_IMPL_CORBA_sequence_Captive_CaptiveOptionsModule_5 'o'
+#define ORBIT_IMPL_CORBA_sequence_Captive_CaptiveOptionsModule_6 'x'
+#if !defined(_CORBA_sequence_Captive_CaptiveOptionsModule_defined)
+#define _CORBA_sequence_Captive_CaptiveOptionsModule_defined 1
+   typedef struct
+   {
+      CORBA_unsigned_long _maximum,
+       _length;
+      Captive_CaptiveOptionsModule *_buffer;
+      CORBA_boolean _release;
+   } CORBA_sequence_Captive_CaptiveOptionsModule;
+#endif
+#if !defined(TC_IMPL_TC_CORBA_sequence_Captive_CaptiveOptionsModule_0)
+#define TC_IMPL_TC_CORBA_sequence_Captive_CaptiveOptionsModule_0 's'
+#define TC_IMPL_TC_CORBA_sequence_Captive_CaptiveOptionsModule_1 'a'
+#define TC_IMPL_TC_CORBA_sequence_Captive_CaptiveOptionsModule_2 'n'
+#define TC_IMPL_TC_CORBA_sequence_Captive_CaptiveOptionsModule_3 'd'
+#define TC_IMPL_TC_CORBA_sequence_Captive_CaptiveOptionsModule_4 'b'
+#define TC_IMPL_TC_CORBA_sequence_Captive_CaptiveOptionsModule_5 'o'
+#define TC_IMPL_TC_CORBA_sequence_Captive_CaptiveOptionsModule_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct
+      TC_CORBA_sequence_Captive_CaptiveOptionsModule_struct;
+#define TC_CORBA_sequence_Captive_CaptiveOptionsModule ((CORBA_TypeCode)&TC_CORBA_sequence_Captive_CaptiveOptionsModule_struct)
+#endif
+#define CORBA_sequence_Captive_CaptiveOptionsModule__alloc() ((CORBA_sequence_Captive_CaptiveOptionsModule *)ORBit_small_alloc (TC_CORBA_sequence_Captive_CaptiveOptionsModule))
+#define CORBA_sequence_Captive_CaptiveOptionsModule__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Captive_CaptiveOptionsModule,(m),(d))
+#define CORBA_sequence_Captive_CaptiveOptionsModule_allocbuf(l) ((Captive_CaptiveOptionsModule*)ORBit_small_allocbuf (TC_CORBA_sequence_Captive_CaptiveOptionsModule, (l)))
+#define CORBA_sequence_Captive_CaptiveOptionsModule_allocbuf(l) ((Captive_CaptiveOptionsModule*)ORBit_small_allocbuf (TC_CORBA_sequence_Captive_CaptiveOptionsModule, (l)))
+#endif
+#if !defined(_Captive_CaptiveOptionsModuleList_defined)
+#define _Captive_CaptiveOptionsModuleList_defined 1
+   typedef CORBA_sequence_Captive_CaptiveOptionsModule
+      Captive_CaptiveOptionsModuleList;
+#define Captive_CaptiveOptionsModuleList_marshal(x,y,z) CORBA_sequence_Captive_CaptiveOptionsModule_marshal((x),(y),(z))
+#define Captive_CaptiveOptionsModuleList_demarshal(x,y,z,i) CORBA_sequence_Captive_CaptiveOptionsModule_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_CaptiveOptionsModuleList_0)
+#define TC_IMPL_TC_Captive_CaptiveOptionsModuleList_0 's'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModuleList_1 'a'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModuleList_2 'n'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModuleList_3 'd'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModuleList_4 'b'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModuleList_5 'o'
+#define TC_IMPL_TC_Captive_CaptiveOptionsModuleList_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct
+      TC_Captive_CaptiveOptionsModuleList_struct;
+#define TC_Captive_CaptiveOptionsModuleList ((CORBA_TypeCode)&TC_Captive_CaptiveOptionsModuleList_struct)
+#endif
+#define Captive_CaptiveOptionsModuleList__alloc() ((Captive_CaptiveOptionsModuleList *)ORBit_small_alloc (TC_CORBA_sequence_Captive_CaptiveOptionsModule))
+#define Captive_CaptiveOptionsModuleList__freekids(m,d) ORBit_small_freekids (TC_CORBA_sequence_Captive_CaptiveOptionsModule,(m),(d))
+#define Captive_CaptiveOptionsModuleList_allocbuf(l) ((Captive_CaptiveOptionsModule*)ORBit_small_allocbuf (TC_CORBA_sequence_Captive_CaptiveOptionsModule, (l)))
+#endif
+#if !defined(_Captive_CaptiveOptions_defined)
+#define _Captive_CaptiveOptions_defined 1
+   typedef struct Captive_CaptiveOptions_type Captive_CaptiveOptions;
+   struct Captive_CaptiveOptions_type
+   {
+      Captive_GLogFunc g_log_func;
+      Captive_CaptiveOptionsModule filesystem;
+      Captive_CaptiveOptionRwmode rwmode;
+      Captive_CaptiveOptionMedia media;
+      CORBA_boolean debug_messages;
+      Captive_CaptiveIOChannel image_iochannel;
+      Captive_CaptiveOptionsModuleList load_module;
+   };
+
+#if !defined(TC_IMPL_TC_Captive_CaptiveOptions_0)
+#define TC_IMPL_TC_Captive_CaptiveOptions_0 's'
+#define TC_IMPL_TC_Captive_CaptiveOptions_1 'a'
+#define TC_IMPL_TC_Captive_CaptiveOptions_2 'n'
+#define TC_IMPL_TC_Captive_CaptiveOptions_3 'd'
+#define TC_IMPL_TC_Captive_CaptiveOptions_4 'b'
+#define TC_IMPL_TC_Captive_CaptiveOptions_5 'o'
+#define TC_IMPL_TC_Captive_CaptiveOptions_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_CaptiveOptions_struct;
+#define TC_Captive_CaptiveOptions ((CORBA_TypeCode)&TC_Captive_CaptiveOptions_struct)
+#endif
+#define Captive_CaptiveOptions__alloc() ((Captive_CaptiveOptions *)ORBit_small_alloc (TC_Captive_CaptiveOptions))
+#define Captive_CaptiveOptions__freekids(m,d) ORBit_small_freekids (TC_Captive_CaptiveOptions,(m),(d))
+#endif
+#if !defined(_Captive_GUInt32_defined)
+#define _Captive_GUInt32_defined 1
+   typedef CORBA_unsigned_long Captive_GUInt32;
+#define Captive_GUInt32_marshal(x,y,z) CORBA_unsigned_long_marshal((x),(y),(z))
+#define Captive_GUInt32_demarshal(x,y,z,i) CORBA_unsigned_long_demarshal((x),(y),(z),(i))
+#if !defined(TC_IMPL_TC_Captive_GUInt32_0)
+#define TC_IMPL_TC_Captive_GUInt32_0 's'
+#define TC_IMPL_TC_Captive_GUInt32_1 'a'
+#define TC_IMPL_TC_Captive_GUInt32_2 'n'
+#define TC_IMPL_TC_Captive_GUInt32_3 'd'
+#define TC_IMPL_TC_Captive_GUInt32_4 'b'
+#define TC_IMPL_TC_Captive_GUInt32_5 'o'
+#define TC_IMPL_TC_Captive_GUInt32_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_GUInt32_struct;
+#define TC_Captive_GUInt32 ((CORBA_TypeCode)&TC_Captive_GUInt32_struct)
+#endif
+#define Captive_GUInt32__alloc() ((Captive_GUInt32 *)ORBit_small_alloc (TC_CORBA_unsigned_long))
+#define Captive_GUInt32__freekids(m,d) ORBit_small_freekids (TC_CORBA_unsigned_long,(m),(d))
+#endif
+#if !defined(_Captive_CaptiveVfsVolumeInfo_defined)
+#define _Captive_CaptiveVfsVolumeInfo_defined 1
+   typedef struct Captive_CaptiveVfsVolumeInfo_type
+      Captive_CaptiveVfsVolumeInfo;
+   struct Captive_CaptiveVfsVolumeInfo_type
+   {
+      Captive_GUInt32 block_size;
+      Captive_GUInt64 bytes;
+      Captive_GUInt64 bytes_free;
+      Captive_GUInt64 bytes_available;
+   };
+
+#if !defined(TC_IMPL_TC_Captive_CaptiveVfsVolumeInfo_0)
+#define TC_IMPL_TC_Captive_CaptiveVfsVolumeInfo_0 's'
+#define TC_IMPL_TC_Captive_CaptiveVfsVolumeInfo_1 'a'
+#define TC_IMPL_TC_Captive_CaptiveVfsVolumeInfo_2 'n'
+#define TC_IMPL_TC_Captive_CaptiveVfsVolumeInfo_3 'd'
+#define TC_IMPL_TC_Captive_CaptiveVfsVolumeInfo_4 'b'
+#define TC_IMPL_TC_Captive_CaptiveVfsVolumeInfo_5 'o'
+#define TC_IMPL_TC_Captive_CaptiveVfsVolumeInfo_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_CaptiveVfsVolumeInfo_struct;
+#define TC_Captive_CaptiveVfsVolumeInfo ((CORBA_TypeCode)&TC_Captive_CaptiveVfsVolumeInfo_struct)
+#endif
+#define Captive_CaptiveVfsVolumeInfo__alloc() ((Captive_CaptiveVfsVolumeInfo *)ORBit_small_alloc (TC_Captive_CaptiveVfsVolumeInfo))
+#define Captive_CaptiveVfsVolumeInfo__freekids(m,d) ORBit_small_freekids (TC_Captive_CaptiveVfsVolumeInfo,(m),(d))
+#endif
+#if !defined(ORBIT_DECL_Captive_Directory) && !defined(_Captive_Directory_defined)
+#define ORBIT_DECL_Captive_Directory 1
+#define _Captive_Directory_defined 1
+#define Captive_Directory__freekids CORBA_Object__freekids
+   typedef CORBA_Object Captive_Directory;
+   extern CORBA_unsigned_long Captive_Directory__classid;
+#if !defined(TC_IMPL_TC_Captive_Directory_0)
+#define TC_IMPL_TC_Captive_Directory_0 's'
+#define TC_IMPL_TC_Captive_Directory_1 'a'
+#define TC_IMPL_TC_Captive_Directory_2 'n'
+#define TC_IMPL_TC_Captive_Directory_3 'd'
+#define TC_IMPL_TC_Captive_Directory_4 'b'
+#define TC_IMPL_TC_Captive_Directory_5 'o'
+#define TC_IMPL_TC_Captive_Directory_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_Directory_struct;
+#define TC_Captive_Directory ((CORBA_TypeCode)&TC_Captive_Directory_struct)
+#endif
+#endif
+#if !defined(ORBIT_DECL_Captive_File) && !defined(_Captive_File_defined)
+#define ORBIT_DECL_Captive_File 1
+#define _Captive_File_defined 1
+#define Captive_File__freekids CORBA_Object__freekids
+   typedef CORBA_Object Captive_File;
+   extern CORBA_unsigned_long Captive_File__classid;
+#if !defined(TC_IMPL_TC_Captive_File_0)
+#define TC_IMPL_TC_Captive_File_0 's'
+#define TC_IMPL_TC_Captive_File_1 'a'
+#define TC_IMPL_TC_Captive_File_2 'n'
+#define TC_IMPL_TC_Captive_File_3 'd'
+#define TC_IMPL_TC_Captive_File_4 'b'
+#define TC_IMPL_TC_Captive_File_5 'o'
+#define TC_IMPL_TC_Captive_File_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_File_struct;
+#define TC_Captive_File ((CORBA_TypeCode)&TC_Captive_File_struct)
+#endif
+#endif
+#if !defined(ORBIT_DECL_Captive_Vfs) && !defined(_Captive_Vfs_defined)
+#define ORBIT_DECL_Captive_Vfs 1
+#define _Captive_Vfs_defined 1
+#define Captive_Vfs__freekids CORBA_Object__freekids
+   typedef CORBA_Object Captive_Vfs;
+   extern CORBA_unsigned_long Captive_Vfs__classid;
+#if !defined(TC_IMPL_TC_Captive_Vfs_0)
+#define TC_IMPL_TC_Captive_Vfs_0 's'
+#define TC_IMPL_TC_Captive_Vfs_1 'a'
+#define TC_IMPL_TC_Captive_Vfs_2 'n'
+#define TC_IMPL_TC_Captive_Vfs_3 'd'
+#define TC_IMPL_TC_Captive_Vfs_4 'b'
+#define TC_IMPL_TC_Captive_Vfs_5 'o'
+#define TC_IMPL_TC_Captive_Vfs_6 'x'
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   const struct CORBA_TypeCode_struct TC_Captive_Vfs_struct;
+#define TC_Captive_Vfs ((CORBA_TypeCode)&TC_Captive_Vfs_struct)
+#endif
+#endif
+
+/** POA structures **/
+#ifndef _defined_POA_Captive_GLogFunc
+#define _defined_POA_Captive_GLogFunc 1
+   typedef struct
+   {
+      void *_private;
+      void (*g_log_func) (PortableServer_Servant _servant,
+			  const Captive_GLogMessage * g_log_message,
+			  CORBA_Environment * ev);
+   } POA_Captive_GLogFunc__epv;
+   typedef struct
+   {
+      PortableServer_ServantBase__epv *_base_epv;
+      POA_Captive_GLogFunc__epv *Captive_GLogFunc_epv;
+   } POA_Captive_GLogFunc__vepv;
+   typedef struct
+   {
+      void *_private;
+      POA_Captive_GLogFunc__vepv *vepv;
+   } POA_Captive_GLogFunc;
+   extern void POA_Captive_GLogFunc__init(PortableServer_Servant servant,
+					  CORBA_Environment * ev);
+   extern void POA_Captive_GLogFunc__fini(PortableServer_Servant servant,
+					  CORBA_Environment * ev);
+#endif				/* _defined_POA_Captive_GLogFunc */
+#ifndef _defined_POA_Captive_CaptiveIOChannel
+#define _defined_POA_Captive_CaptiveIOChannel 1
+   typedef struct
+   {
+      void *_private;
+      void (*read) (PortableServer_Servant _servant, Captive_Bytes ** buffer,
+		    const Captive_GSize count, CORBA_Environment * ev);
+      void (*write) (PortableServer_Servant _servant,
+		     const Captive_Bytes * buffer,
+		     Captive_GSize * bytes_written_return,
+		     CORBA_Environment * ev);
+      void (*seek) (PortableServer_Servant _servant,
+		    const Captive_GInt64 offset, const Captive_GSeekType type,
+		    CORBA_Environment * ev);
+       Captive_GUInt64(*size) (PortableServer_Servant _servant,
+			       CORBA_Environment * ev);
+   } POA_Captive_CaptiveIOChannel__epv;
+   typedef struct
+   {
+      PortableServer_ServantBase__epv *_base_epv;
+      POA_Captive_CaptiveIOChannel__epv *Captive_CaptiveIOChannel_epv;
+   } POA_Captive_CaptiveIOChannel__vepv;
+   typedef struct
+   {
+      void *_private;
+      POA_Captive_CaptiveIOChannel__vepv *vepv;
+   } POA_Captive_CaptiveIOChannel;
+   extern void POA_Captive_CaptiveIOChannel__init(PortableServer_Servant
+						  servant,
+						  CORBA_Environment * ev);
+   extern void POA_Captive_CaptiveIOChannel__fini(PortableServer_Servant
+						  servant,
+						  CORBA_Environment * ev);
+#endif				/* _defined_POA_Captive_CaptiveIOChannel */
+#ifndef _defined_POA_Captive_Directory
+#define _defined_POA_Captive_Directory 1
+   typedef struct
+   {
+      void *_private;
+      void (*read) (PortableServer_Servant _servant,
+		    Captive_GnomeVFSFileInfo ** file_info,
+		    CORBA_Environment * ev);
+      void (*remove) (PortableServer_Servant _servant,
+		      CORBA_Environment * ev);
+      void (*shutdown) (PortableServer_Servant _servant,
+			CORBA_Environment * ev);
+   } POA_Captive_Directory__epv;
+   typedef struct
+   {
+      PortableServer_ServantBase__epv *_base_epv;
+      POA_Captive_Directory__epv *Captive_Directory_epv;
+   } POA_Captive_Directory__vepv;
+   typedef struct
+   {
+      void *_private;
+      POA_Captive_Directory__vepv *vepv;
+   } POA_Captive_Directory;
+   extern void POA_Captive_Directory__init(PortableServer_Servant servant,
+					   CORBA_Environment * ev);
+   extern void POA_Captive_Directory__fini(PortableServer_Servant servant,
+					   CORBA_Environment * ev);
+#endif				/* _defined_POA_Captive_Directory */
+#ifndef _defined_POA_Captive_File
+#define _defined_POA_Captive_File 1
+   typedef struct
+   {
+      void *_private;
+      void (*read) (PortableServer_Servant _servant, Captive_Bytes ** buffer,
+		    const Captive_GnomeVFSFileSize num_bytes,
+		    CORBA_Environment * ev);
+      void (*write) (PortableServer_Servant _servant,
+		     const Captive_Bytes * buffer,
+		     Captive_GnomeVFSFileSize * bytes_written_return,
+		     CORBA_Environment * ev);
+      void (*seek) (PortableServer_Servant _servant,
+		    const Captive_GnomeVFSSeekPosition whence,
+		    const Captive_GnomeVFSFileOffset offset,
+		    CORBA_Environment * ev);
+      void (*tell) (PortableServer_Servant _servant,
+		    Captive_GnomeVFSFileOffset * offset_return,
+		    CORBA_Environment * ev);
+      void (*remove) (PortableServer_Servant _servant,
+		      CORBA_Environment * ev);
+      void (*file_info_get) (PortableServer_Servant _servant,
+			     Captive_GnomeVFSFileInfo ** file_info,
+			     CORBA_Environment * ev);
+      void (*file_info_set) (PortableServer_Servant _servant,
+			     const Captive_GnomeVFSFileInfo * file_info,
+			     const Captive_GnomeVFSSetFileInfoMask mask,
+			     CORBA_Environment * ev);
+      void (*truncate) (PortableServer_Servant _servant,
+			const Captive_GnomeVFSFileSize file_size,
+			CORBA_Environment * ev);
+      void (*move) (PortableServer_Servant _servant,
+		    const CORBA_char * pathname_new,
+		    const CORBA_boolean force_replace,
+		    CORBA_Environment * ev);
+      void (*shutdown) (PortableServer_Servant _servant,
+			CORBA_Environment * ev);
+   } POA_Captive_File__epv;
+   typedef struct
+   {
+      PortableServer_ServantBase__epv *_base_epv;
+      POA_Captive_File__epv *Captive_File_epv;
+   } POA_Captive_File__vepv;
+   typedef struct
+   {
+      void *_private;
+      POA_Captive_File__vepv *vepv;
+   } POA_Captive_File;
+   extern void POA_Captive_File__init(PortableServer_Servant servant,
+				      CORBA_Environment * ev);
+   extern void POA_Captive_File__fini(PortableServer_Servant servant,
+				      CORBA_Environment * ev);
+#endif				/* _defined_POA_Captive_File */
+#ifndef _defined_POA_Captive_Vfs
+#define _defined_POA_Captive_Vfs 1
+   typedef struct
+   {
+      void *_private;
+      void (*init) (PortableServer_Servant _servant,
+		    const Captive_CaptiveOptions * options,
+		    CORBA_Environment * ev);
+      void (*shutdown) (PortableServer_Servant _servant,
+			CORBA_Environment * ev);
+       Captive_Directory(*directory_new_open) (PortableServer_Servant
+					       _servant,
+					       const CORBA_char * pathname,
+					       CORBA_Environment * ev);
+       Captive_Directory(*directory_new_make) (PortableServer_Servant
+					       _servant,
+					       const CORBA_char * pathname,
+					       const
+					       Captive_GnomeVFSFilePermissions
+					       perm, CORBA_Environment * ev);
+       Captive_File(*file_new_open) (PortableServer_Servant _servant,
+				     const CORBA_char * pathname,
+				     const Captive_GnomeVFSOpenMode mode,
+				     CORBA_Environment * ev);
+       Captive_File(*file_new_create) (PortableServer_Servant _servant,
+				       const CORBA_char * pathname,
+				       const Captive_GnomeVFSOpenMode mode,
+				       const CORBA_boolean exclusive,
+				       const CORBA_unsigned_long perm,
+				       CORBA_Environment * ev);
+      void (*volume_info_get) (PortableServer_Servant _servant,
+			       Captive_CaptiveVfsVolumeInfo * volume_info,
+			       CORBA_Environment * ev);
+   } POA_Captive_Vfs__epv;
+   typedef struct
+   {
+      PortableServer_ServantBase__epv *_base_epv;
+      POA_Captive_Vfs__epv *Captive_Vfs_epv;
+   } POA_Captive_Vfs__vepv;
+   typedef struct
+   {
+      void *_private;
+      POA_Captive_Vfs__vepv *vepv;
+   } POA_Captive_Vfs;
+   extern void POA_Captive_Vfs__init(PortableServer_Servant servant,
+				     CORBA_Environment * ev);
+   extern void POA_Captive_Vfs__fini(PortableServer_Servant servant,
+				     CORBA_Environment * ev);
+#endif				/* _defined_POA_Captive_Vfs */
+
+/** skel prototypes **/
+   void _ORBIT_skel_small_Captive_GLogFunc_g_log_func(POA_Captive_GLogFunc *
+						      _ORBIT_servant,
+						      gpointer _ORBIT_retval,
+						      gpointer * _ORBIT_args,
+						      CORBA_Context ctx,
+						      CORBA_Environment * ev,
+						      void (*_impl_g_log_func)
+						      (PortableServer_Servant
+						       _servant,
+						       const
+						       Captive_GLogMessage *
+						       g_log_message,
+						       CORBA_Environment *
+						       ev));
+   void
+      _ORBIT_skel_small_Captive_CaptiveIOChannel_read
+      (POA_Captive_CaptiveIOChannel * _ORBIT_servant, gpointer _ORBIT_retval,
+       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
+       void (*_impl_read) (PortableServer_Servant _servant,
+			   Captive_Bytes ** buffer, const Captive_GSize count,
+			   CORBA_Environment * ev));
+   void
+      _ORBIT_skel_small_Captive_CaptiveIOChannel_write
+      (POA_Captive_CaptiveIOChannel * _ORBIT_servant, gpointer _ORBIT_retval,
+       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
+       void (*_impl_write) (PortableServer_Servant _servant,
+			    const Captive_Bytes * buffer,
+			    Captive_GSize * bytes_written_return,
+			    CORBA_Environment * ev));
+   void
+      _ORBIT_skel_small_Captive_CaptiveIOChannel_seek
+      (POA_Captive_CaptiveIOChannel * _ORBIT_servant, gpointer _ORBIT_retval,
+       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
+       void (*_impl_seek) (PortableServer_Servant _servant,
+			   const Captive_GInt64 offset,
+			   const Captive_GSeekType type,
+			   CORBA_Environment * ev));
+   void
+      _ORBIT_skel_small_Captive_CaptiveIOChannel_size
+      (POA_Captive_CaptiveIOChannel * _ORBIT_servant, gpointer _ORBIT_retval,
+       gpointer * _ORBIT_args, CORBA_Context ctx, CORBA_Environment * ev,
+       Captive_GUInt64(*_impl_size) (PortableServer_Servant _servant,
+				     CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_Directory_read(POA_Captive_Directory *
+						 _ORBIT_servant,
+						 gpointer _ORBIT_retval,
+						 gpointer * _ORBIT_args,
+						 CORBA_Context ctx,
+						 CORBA_Environment * ev,
+						 void (*_impl_read)
+						 (PortableServer_Servant
+						  _servant,
+						  Captive_GnomeVFSFileInfo **
+						  file_info,
+						  CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_Directory_remove(POA_Captive_Directory *
+						   _ORBIT_servant,
+						   gpointer _ORBIT_retval,
+						   gpointer * _ORBIT_args,
+						   CORBA_Context ctx,
+						   CORBA_Environment * ev,
+						   void (*_impl_remove)
+						   (PortableServer_Servant
+						    _servant,
+						    CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_Directory_shutdown(POA_Captive_Directory *
+						     _ORBIT_servant,
+						     gpointer _ORBIT_retval,
+						     gpointer * _ORBIT_args,
+						     CORBA_Context ctx,
+						     CORBA_Environment * ev,
+						     void (*_impl_shutdown)
+						     (PortableServer_Servant
+						      _servant,
+						      CORBA_Environment *
+						      ev));
+   void _ORBIT_skel_small_Captive_File_read(POA_Captive_File * _ORBIT_servant,
+					    gpointer _ORBIT_retval,
+					    gpointer * _ORBIT_args,
+					    CORBA_Context ctx,
+					    CORBA_Environment * ev,
+					    void (*_impl_read)
+					    (PortableServer_Servant _servant,
+					     Captive_Bytes ** buffer,
+					     const Captive_GnomeVFSFileSize
+					     num_bytes,
+					     CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_File_write(POA_Captive_File *
+					     _ORBIT_servant,
+					     gpointer _ORBIT_retval,
+					     gpointer * _ORBIT_args,
+					     CORBA_Context ctx,
+					     CORBA_Environment * ev,
+					     void (*_impl_write)
+					     (PortableServer_Servant _servant,
+					      const Captive_Bytes * buffer,
+					      Captive_GnomeVFSFileSize *
+					      bytes_written_return,
+					      CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_File_seek(POA_Captive_File * _ORBIT_servant,
+					    gpointer _ORBIT_retval,
+					    gpointer * _ORBIT_args,
+					    CORBA_Context ctx,
+					    CORBA_Environment * ev,
+					    void (*_impl_seek)
+					    (PortableServer_Servant _servant,
+					     const
+					     Captive_GnomeVFSSeekPosition
+					     whence,
+					     const Captive_GnomeVFSFileOffset
+					     offset, CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_File_tell(POA_Captive_File * _ORBIT_servant,
+					    gpointer _ORBIT_retval,
+					    gpointer * _ORBIT_args,
+					    CORBA_Context ctx,
+					    CORBA_Environment * ev,
+					    void (*_impl_tell)
+					    (PortableServer_Servant _servant,
+					     Captive_GnomeVFSFileOffset *
+					     offset_return,
+					     CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_File_remove(POA_Captive_File *
+					      _ORBIT_servant,
+					      gpointer _ORBIT_retval,
+					      gpointer * _ORBIT_args,
+					      CORBA_Context ctx,
+					      CORBA_Environment * ev,
+					      void (*_impl_remove)
+					      (PortableServer_Servant
+					       _servant,
+					       CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_File_file_info_get(POA_Captive_File *
+						     _ORBIT_servant,
+						     gpointer _ORBIT_retval,
+						     gpointer * _ORBIT_args,
+						     CORBA_Context ctx,
+						     CORBA_Environment * ev,
+						     void
+						     (*_impl_file_info_get)
+						     (PortableServer_Servant
+						      _servant,
+						      Captive_GnomeVFSFileInfo
+						      ** file_info,
+						      CORBA_Environment *
+						      ev));
+   void _ORBIT_skel_small_Captive_File_file_info_set(POA_Captive_File *
+						     _ORBIT_servant,
+						     gpointer _ORBIT_retval,
+						     gpointer * _ORBIT_args,
+						     CORBA_Context ctx,
+						     CORBA_Environment * ev,
+						     void
+						     (*_impl_file_info_set)
+						     (PortableServer_Servant
+						      _servant,
+						      const
+						      Captive_GnomeVFSFileInfo
+						      * file_info,
+						      const
+						      Captive_GnomeVFSSetFileInfoMask
+						      mask,
+						      CORBA_Environment *
+						      ev));
+   void _ORBIT_skel_small_Captive_File_truncate(POA_Captive_File *
+						_ORBIT_servant,
+						gpointer _ORBIT_retval,
+						gpointer * _ORBIT_args,
+						CORBA_Context ctx,
+						CORBA_Environment * ev,
+						void (*_impl_truncate)
+						(PortableServer_Servant
+						 _servant,
+						 const
+						 Captive_GnomeVFSFileSize
+						 file_size,
+						 CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_File_move(POA_Captive_File * _ORBIT_servant,
+					    gpointer _ORBIT_retval,
+					    gpointer * _ORBIT_args,
+					    CORBA_Context ctx,
+					    CORBA_Environment * ev,
+					    void (*_impl_move)
+					    (PortableServer_Servant _servant,
+					     const CORBA_char * pathname_new,
+					     const CORBA_boolean
+					     force_replace,
+					     CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_File_shutdown(POA_Captive_File *
+						_ORBIT_servant,
+						gpointer _ORBIT_retval,
+						gpointer * _ORBIT_args,
+						CORBA_Context ctx,
+						CORBA_Environment * ev,
+						void (*_impl_shutdown)
+						(PortableServer_Servant
+						 _servant,
+						 CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_Vfs_init(POA_Captive_Vfs * _ORBIT_servant,
+					   gpointer _ORBIT_retval,
+					   gpointer * _ORBIT_args,
+					   CORBA_Context ctx,
+					   CORBA_Environment * ev,
+					   void (*_impl_init)
+					   (PortableServer_Servant _servant,
+					    const Captive_CaptiveOptions *
+					    options, CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_Vfs_shutdown(POA_Captive_Vfs *
+					       _ORBIT_servant,
+					       gpointer _ORBIT_retval,
+					       gpointer * _ORBIT_args,
+					       CORBA_Context ctx,
+					       CORBA_Environment * ev,
+					       void (*_impl_shutdown)
+					       (PortableServer_Servant
+						_servant,
+						CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_Vfs_directory_new_open(POA_Captive_Vfs *
+							 _ORBIT_servant,
+							 gpointer
+							 _ORBIT_retval,
+							 gpointer *
+							 _ORBIT_args,
+							 CORBA_Context ctx,
+							 CORBA_Environment *
+							 ev,
+							 Captive_Directory
+							 (*_impl_directory_new_open)
+							 (PortableServer_Servant
+							  _servant,
+							  const CORBA_char *
+							  pathname,
+							  CORBA_Environment *
+							  ev));
+   void _ORBIT_skel_small_Captive_Vfs_directory_new_make(POA_Captive_Vfs *
+							 _ORBIT_servant,
+							 gpointer
+							 _ORBIT_retval,
+							 gpointer *
+							 _ORBIT_args,
+							 CORBA_Context ctx,
+							 CORBA_Environment *
+							 ev,
+							 Captive_Directory
+							 (*_impl_directory_new_make)
+							 (PortableServer_Servant
+							  _servant,
+							  const CORBA_char *
+							  pathname,
+							  const
+							  Captive_GnomeVFSFilePermissions
+							  perm,
+							  CORBA_Environment *
+							  ev));
+   void _ORBIT_skel_small_Captive_Vfs_file_new_open(POA_Captive_Vfs *
+						    _ORBIT_servant,
+						    gpointer _ORBIT_retval,
+						    gpointer * _ORBIT_args,
+						    CORBA_Context ctx,
+						    CORBA_Environment * ev,
+						    Captive_File
+						    (*_impl_file_new_open)
+						    (PortableServer_Servant
+						     _servant,
+						     const CORBA_char *
+						     pathname,
+						     const
+						     Captive_GnomeVFSOpenMode
+						     mode,
+						     CORBA_Environment * ev));
+   void _ORBIT_skel_small_Captive_Vfs_file_new_create(POA_Captive_Vfs *
+						      _ORBIT_servant,
+						      gpointer _ORBIT_retval,
+						      gpointer * _ORBIT_args,
+						      CORBA_Context ctx,
+						      CORBA_Environment * ev,
+						      Captive_File
+						      (*_impl_file_new_create)
+						      (PortableServer_Servant
+						       _servant,
+						       const CORBA_char *
+						       pathname,
+						       const
+						       Captive_GnomeVFSOpenMode
+						       mode,
+						       const CORBA_boolean
+						       exclusive,
+						       const
+						       CORBA_unsigned_long
+						       perm,
+						       CORBA_Environment *
+						       ev));
+   void _ORBIT_skel_small_Captive_Vfs_volume_info_get(POA_Captive_Vfs *
+						      _ORBIT_servant,
+						      gpointer _ORBIT_retval,
+						      gpointer * _ORBIT_args,
+						      CORBA_Context ctx,
+						      CORBA_Environment * ev,
+						      void
+						      (*_impl_volume_info_get)
+						      (PortableServer_Servant
+						       _servant,
+						       Captive_CaptiveVfsVolumeInfo
+						       * volume_info,
+						       CORBA_Environment *
+						       ev));
+
+/** stub prototypes **/
+   void Captive_GLogFunc_g_log_func(Captive_GLogFunc _obj,
+				    const Captive_GLogMessage * g_log_message,
+				    CORBA_Environment * ev);
+   void Captive_CaptiveIOChannel_read(Captive_CaptiveIOChannel _obj,
+				      Captive_Bytes ** buffer,
+				      const Captive_GSize count,
+				      CORBA_Environment * ev);
+   void Captive_CaptiveIOChannel_write(Captive_CaptiveIOChannel _obj,
+				       const Captive_Bytes * buffer,
+				       Captive_GSize * bytes_written_return,
+				       CORBA_Environment * ev);
+   void Captive_CaptiveIOChannel_seek(Captive_CaptiveIOChannel _obj,
+				      const Captive_GInt64 offset,
+				      const Captive_GSeekType type,
+				      CORBA_Environment * ev);
+   Captive_GUInt64 Captive_CaptiveIOChannel_size(Captive_CaptiveIOChannel
+						 _obj,
+						 CORBA_Environment * ev);
+   void Captive_Directory_read(Captive_Directory _obj,
+			       Captive_GnomeVFSFileInfo ** file_info,
+			       CORBA_Environment * ev);
+   void Captive_Directory_remove(Captive_Directory _obj,
+				 CORBA_Environment * ev);
+   void Captive_Directory_shutdown(Captive_Directory _obj,
+				   CORBA_Environment * ev);
+   void Captive_File_read(Captive_File _obj, Captive_Bytes ** buffer,
+			  const Captive_GnomeVFSFileSize num_bytes,
+			  CORBA_Environment * ev);
+   void Captive_File_write(Captive_File _obj, const Captive_Bytes * buffer,
+			   Captive_GnomeVFSFileSize * bytes_written_return,
+			   CORBA_Environment * ev);
+   void Captive_File_seek(Captive_File _obj,
+			  const Captive_GnomeVFSSeekPosition whence,
+			  const Captive_GnomeVFSFileOffset offset,
+			  CORBA_Environment * ev);
+   void Captive_File_tell(Captive_File _obj,
+			  Captive_GnomeVFSFileOffset * offset_return,
+			  CORBA_Environment * ev);
+   void Captive_File_remove(Captive_File _obj, CORBA_Environment * ev);
+   void Captive_File_file_info_get(Captive_File _obj,
+				   Captive_GnomeVFSFileInfo ** file_info,
+				   CORBA_Environment * ev);
+   void Captive_File_file_info_set(Captive_File _obj,
+				   const Captive_GnomeVFSFileInfo * file_info,
+				   const Captive_GnomeVFSSetFileInfoMask mask,
+				   CORBA_Environment * ev);
+   void Captive_File_truncate(Captive_File _obj,
+			      const Captive_GnomeVFSFileSize file_size,
+			      CORBA_Environment * ev);
+   void Captive_File_move(Captive_File _obj, const CORBA_char * pathname_new,
+			  const CORBA_boolean force_replace,
+			  CORBA_Environment * ev);
+   void Captive_File_shutdown(Captive_File _obj, CORBA_Environment * ev);
+   void Captive_Vfs_init(Captive_Vfs _obj,
+			 const Captive_CaptiveOptions * options,
+			 CORBA_Environment * ev);
+   void Captive_Vfs_shutdown(Captive_Vfs _obj, CORBA_Environment * ev);
+   Captive_Directory Captive_Vfs_directory_new_open(Captive_Vfs _obj,
+						    const CORBA_char *
+						    pathname,
+						    CORBA_Environment * ev);
+   Captive_Directory Captive_Vfs_directory_new_make(Captive_Vfs _obj,
+						    const CORBA_char *
+						    pathname,
+						    const
+						    Captive_GnomeVFSFilePermissions
+						    perm,
+						    CORBA_Environment * ev);
+   Captive_File Captive_Vfs_file_new_open(Captive_Vfs _obj,
+					  const CORBA_char * pathname,
+					  const Captive_GnomeVFSOpenMode mode,
+					  CORBA_Environment * ev);
+   Captive_File Captive_Vfs_file_new_create(Captive_Vfs _obj,
+					    const CORBA_char * pathname,
+					    const Captive_GnomeVFSOpenMode
+					    mode,
+					    const CORBA_boolean exclusive,
+					    const CORBA_unsigned_long perm,
+					    CORBA_Environment * ev);
+   void Captive_Vfs_volume_info_get(Captive_Vfs _obj,
+				    Captive_CaptiveVfsVolumeInfo *
+				    volume_info, CORBA_Environment * ev);
+#include <orbit/orb-core/orbit-interface.h>
+
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IInterface Captive_GLogFunc__iinterface;
+#define Captive_GLogFunc_IMETHODS_LEN 1
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IMethod Captive_GLogFunc__imethods[Captive_GLogFunc_IMETHODS_LEN];
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IInterface Captive_CaptiveIOChannel__iinterface;
+#define Captive_CaptiveIOChannel_IMETHODS_LEN 4
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IMethod
+      Captive_CaptiveIOChannel__imethods
+      [Captive_CaptiveIOChannel_IMETHODS_LEN];
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IInterface Captive_Directory__iinterface;
+#define Captive_Directory_IMETHODS_LEN 3
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IMethod Captive_Directory__imethods[Captive_Directory_IMETHODS_LEN];
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IInterface Captive_File__iinterface;
+#define Captive_File_IMETHODS_LEN 10
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IMethod Captive_File__imethods[Captive_File_IMETHODS_LEN];
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IInterface Captive_Vfs__iinterface;
+#define Captive_Vfs_IMETHODS_LEN 7
+#ifdef ORBIT_IDL_C_IMODULE_sandbox
+   static
+#else
+   extern
+#endif
+   ORBit_IMethod Captive_Vfs__imethods[Captive_Vfs_IMETHODS_LEN];
+#ifdef __cplusplus
+}
+#endif				/* __cplusplus */
+
+#ifndef EXCLUDE_ORBIT_H
+#include <orbit/orbit.h>
+
+#endif				/* EXCLUDE_ORBIT_H */
+#endif
+#undef ORBIT_IDL_SERIAL
